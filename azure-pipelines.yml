# # ASP.NET Core
# # Build and test ASP.NET Core projects targeting .NET Core.
# # Add steps that run tests, create a NuGet package, deploy, and more:
# # https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

name : NetCore-CustomerApi-CI
trigger:
  branches:
    include:
      - unit-tests
 
pool:
  vmImage: 'windows-latest' # select windows as the agent
 
variables:
  buildConfiguration: 'Release'
 
steps:
# # Install all package dependencies to the correct state matching the package references in your project file (.csproj)
- task: DotNetCoreCLI@2  
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
  displayName: 'Restore Nuget Packages'
 
 # # Build the dot net project with 
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--no-restore'
  displayName: 'Build projects'
 
 # # Run the test cases and generate a coverage report
- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: 'test'
    projects: '**/*Tests.csproj'
    arguments: '/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./MyCoverage/'
    publishTestResults: true
 
 # # Publish the coverage report to show it in the summary section
- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage Results'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/**/MyCoverage/coverage.cobertura.xml'
    failIfCoverageEmpty: true

# # Create a ZIP of the project 
- task: ArchiveFiles@2
  displayName: 'Archive files'
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
    includeRootFolder: false
    archiveType: zip
    archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
    replaceExistingArchive: true
 
 # # Publish the ZIP folder as an artifact to be used in the release pipeline
- upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
  artifact: drop


